1 如何计算结构体占用的空间
  - 在 Go 语言中，我们可以使用 unsafe.Sizeof 计算出一个数据类型实例需要占用的字节数。
  - 一个结构体实例所占据的空间等于各字段占据空间之和，再加上内存对齐的空间大小。

2 CPU 访问内存时，并不是逐个字节访问，而是以字长（word size）为单位访问。比如 32 位的 CPU ，字长为 4 字节，那么 CPU 访问内存的单位也是 4 字节。
  - 这么设计的目的，是减少 CPU 访问内存的次数，加大 CPU 访问内存的吞吐量。比如同样读取 8 个字节的数据，一次读取 4 个字节那么只需要读取 2 次。

3 合理的内存对齐可以提高内存读写的性能，并且便于实现变量操作的原子性。
  - 变量 a、b 各占据 3 字节的空间，内存对齐后，a、b 占据 4 字节空间，CPU 读取 b 变量的值只需要进行一次内存访问。如果不进行内存对齐，CPU 读取 b 变量的值需要进行 2 次内存访问。第一次访问得到 b 变量的第 1 个字节，第二次访问得到 b 变量的后两个字节。

从这个例子中也可以看到，内存对齐对实现变量的原子性操作也是有好处的，每次内存访问是原子的，如果变量的大小不超过字长，那么内存对齐后，对该变量的访问就是原子的，这个特性在并发场景下至关重要。

4 unsafe.Alignof
  - unsafe 标准库提供了 Alignof 方法，可以返回一个类型的对齐值，也可以叫做对齐系数或者对齐倍数

5 对齐保证(align guarantee)
  - 对于任意类型的变量 x ，unsafe.Alignof(x) 至少为 1。
  - 对于 struct 结构体类型的变量 x，计算 x 每一个字段 f 的 unsafe.Alignof(x.f)，unsafe.Alignof(x) 等于其中的最大值。
  - 对于 array 数组类型的变量 x，unsafe.Alignof(x) 等于构成数组的元素类型的对齐倍数。

6 struct 内存对齐的技巧
  - 合理布局减少内存占用
    ···
    type demo1 struct {
      a int8
      b int16
      c int32
    }

    type demo2 struct {
      a int8
      c int32
      b int16
    }

    func main() {
      fmt.Println(unsafe.Sizeof(demo1{})) // 8
      fmt.Println(unsafe.Sizeof(demo2{})) // 12
    }
    ···
    对内存特别敏感的结构体的设计上，我们可以通过调整字段的顺序，减少内存的占用.所以字段按照类型占用字节大小排列可以减少内存占用.
7 空 struct{} 的对齐
  空 struct{} 大小为 0，作为其他 struct 的字段时，一般不需要内存对齐。但是有一种情况除外：即当 struct{} 作为结构体最后一个字段时，需要内存对齐。因为如果有指针指向该字段, 返回的地址将在结构体之外，如果此指针一直存活不释放对应的内存，就会有内存泄露的问题（该内存不因结构体释放而释放）。
  ```
  type demo3 struct {
    c int32
    a struct{}
  }

  type demo4 struct {
    a struct{}
    c int32
  }

  func main() {
    fmt.Println(unsafe.Sizeof(demo3{})) // 8
    fmt.Println(unsafe.Sizeof(demo4{})) // 4
  }
  ```
  可以看到，demo4{} 的大小为 4 字节，与字段 c 占据空间一致，而 demo3{} 的大小为 8 字节，即额外填充了 4 字节的空间。

reference：
  go官网: https://golang.org/ref/spec#Size_and_alignment_guarantees
  https://geektutu.com/post/hpg-struct-alignment.html
